#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Wed Aug 13 09:57:25 2014

import wx
import subprocess
# begin wxGlade: extracode
# end wxGlade

import sqlite3 as mysql
import os,sys
from vote import voting_machine
from about import About
from result import PDF
import pygame
import time


dir = os.path.split(sys.argv[0])[0]
Mydb=dir+'/poll.db'


if os.path.exists(Mydb):
    
    pass
    
    
else:
    
    print "DB does not exist"
    











class poll(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: poll.__init__
        kwds["style"] = wx.CAPTION |wx.CLOSE_BOX| wx.MINIMIZE_BOX 
        
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.ScrolledWindow(self, -1, style=wx.TAB_TRAVERSAL)
        self.label_1 = wx.StaticText(self.panel_1, -1, "CLASS")
        self.combo_box_1 = wx.ComboBox(self.panel_1, -1, choices=["Select", "8", "9", "10", "S1", "C1","H1","S2", "C2","H2"], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY | wx.CB_SORT)
        self.label_2 = wx.StaticText(self.panel_1, -1, "DIV")
        cls_choice=["Select", "A", "B", "C", "D", "E", "F", "G", "H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
        self.combo_box_2 = wx.ComboBox(self.panel_1, -1, choices=cls_choice, style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY | wx.CB_SORT)
        self.sizer_4_staticbox = wx.StaticBox(self.panel_1, -1, "Specify Class ")
        self.list_box_1 = wx.ListBox(self.panel_1, -1, choices=[], style=wx.LB_SINGLE)
        self.button_1 = wx.Button(self.panel_1, -1, "Remove Candidate")
        self.text_ctrl_1 = wx.TextCtrl(self.panel_1, -1, "")
        self.button_2 = wx.Button(self.panel_1, -1, "Add Candidate")
        self.sizer_9_staticbox = wx.StaticBox(self.panel_1, -1, "New Candidate")
        self.button_3 = wx.Button(self.panel_1, -1, "Start Poll")
        self.button_4 = wx.Button(self.panel_1, -1, "Continue Poll")
        self.button_5 = wx.Button(self.panel_1, -1, "Result")
        
        #mymenu=MyMenuBar()
        #self.SetMenuBar=mymenu

        
        self.__set_properties()
        self.__do_layout()
        self.__set_menu()

        self.Bind(wx.EVT_COMBOBOX, self.OnClass, self.combo_box_1)
        self.Bind(wx.EVT_COMBOBOX, self.OnDiv, self.combo_box_2)
        self.Bind(wx.EVT_LISTBOX, self.OnList, self.list_box_1)
        
        self.Bind(wx.EVT_BUTTON, self.OnRemove, self.button_1)
        self.Bind(wx.EVT_TEXT, self.OnText, self.text_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.OnAdd, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnStart, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OnRepoll, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.OnResult, self.button_5)
        
        self.Bind(wx.EVT_KEY_DOWN, self.OnKeyPress)#,self.text_ctrl_1)
        
        
        self.CLASS='Select'
        self.DIV='Select'
        
        self.con=mysql.connect(Mydb)
        self.cur = self.con.cursor()
        
        
        
       
        
        # end wxGlade
    def __set_menu(self):
        menuBar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        
        self.mn_consolidated= wx.MenuItem(wxglade_tmp_menu, 106, "&Consolidated Report", "Report of all classes", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mn_consolidated)
        
        self.mn_export = wx.MenuItem(wxglade_tmp_menu, 101, "E&xport Database", "Exports database to be used in othe computers", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mn_export)
        self.mn_import = wx.MenuItem(wxglade_tmp_menu, 102, "&Import Database", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mn_import)
        self.mn_exit = wx.MenuItem(wxglade_tmp_menu, 104, "&Exit", "Closes the App", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.mn_exit)
        menuBar.Append(wxglade_tmp_menu, "File")
        self.mn_about_bar = wx.Menu()
        self.mn_about = wx.MenuItem(self.mn_about_bar, 103, "&About", "", wx.ITEM_NORMAL)
        self.mn_help = wx.MenuItem(self.mn_about_bar, 105, "&Help", "", wx.ITEM_NORMAL)
        self.mn_about_bar.AppendItem(self.mn_about)
        self.mn_about_bar.AppendItem(self.mn_help)
        menuBar.Append(self.mn_about_bar, "About")
        
        self.SetMenuBar(menuBar)
        
        
        self.Bind(wx.EVT_MENU, self.OnConsolidated, self.mn_consolidated)
        self.Bind(wx.EVT_MENU, self.OnExport, self.mn_export)
        self.Bind(wx.EVT_MENU, self.OnImport, self.mn_import)
        self.Bind(wx.EVT_MENU, self.OnExit, self.mn_exit)
        self.Bind(wx.EVT_MENU, self.OnAbout, self.mn_about)
        self.Bind(wx.EVT_MENU, self.OnHelp, self.mn_help)
        
   
        
    def OnConsolidated(self,event):
        self.OnConsolidatedResult()
        
    def OnHelp(self,event):
        
        subprocess.call(["xdg-open",dir+'/docs/help.html'])
    def OnExport(self, event):  # wxGlade: MyMenuBar.<event_handler>
        
        
        import time
        
        mytime=time.localtime()# returns year, month,date,etc
        filename="S_EVM_"+str(mytime[2])+"_"+str(mytime[1])+"_"+str(mytime[0])
        
        wcd="EVM files Files(*.mvdb)|*.mvdb|"
        dir = wx.GetHomeDir()+'/Desktop'
        save_dlg = wx.FileDialog(None, message='Save file as...', defaultDir=dir, defaultFile= filename, wildcard=wcd, style=wx.SAVE | wx.OVERWRITE_PROMPT)
        if save_dlg.ShowModal() == wx.ID_OK:
            path = save_dlg.GetPath()
            try:
                path+=".mvdb"
                with open(path, 'w') as f:
        
                    for line in self.con.iterdump():
                        f.write('%s\n' % line)
                        
                        
            
                f.close()
     
                
                dlg = wx.MessageDialog(self, 'Successfully Exported', '',wx.OK | wx.ICON_INFORMATION)                  
                dlg.ShowModal()
                dlg.Destroy()
            except:
                dlg = wx.MessageDialog(None, 'Error Exporting file\n' )
                dlg.ShowModal()
                
        save_dlg.Destroy()
        
        event.Skip()

    def OnImport(self, event):  # wxGlade: MyMenuBar.<event_handler>
        
        msg="Importing may overwrite some of the existing data \n Do you want to continue?"
        dlg = wx.MessageDialog(self, msg)#,wx.SAVE|wx.ICON_QUESTION)            
        if dlg.ShowModal() == wx.ID_OK:
            
        
            dir = wx.GetHomeDir()+'/Desktop'
            
            

            wcd=wcd="EVM files Files(*.mvdb)|*.mvdb|"
            open_dlg = wx.FileDialog(self, message='Choose a file', defaultDir=dir, defaultFile='',  wildcard=wcd, style=wx.OPEN|wx.CHANGE_DIR)
            if open_dlg.ShowModal() == wx.ID_OK:
                
                path = open_dlg.GetPath()                
                 
                try:   
                    
                    
                    self.Import_DB_Op(path)
                
                
                
                    dlg = wx.MessageDialog(self, 'Successfully imported', '',wx.OK | wx.ICON_INFORMATION)    
                        
                except:
                    dlg = wx.MessageDialog(self, 'Sorry, Could not import', '',wx.OK | wx.ICON_ERROR)    
                           
                self.con2.close()               
                dlg.ShowModal()
                dlg.Destroy()
        event.Skip()
    def Import_DB_Op(self,path):
        self.con2=mysql.connect(":memory:")
       
        
        self.cur2 = self.con2.cursor()
        
        
        
        #encr.decrypt_file(path)
        f=open(path)
        sql = f.read() # watch out for built-in `str`
        f.close()
        #encr.encrypt_file(path)
        self.cur2.executescript(sql)
        self.con2.commit()
        
        query="SELECT * FROM poll"        
        self.cur2.execute(query)
        
        for new_row in self.cur2.fetchall():
            
            new_id=new_row[0]
            new_name=new_row[1]
            new_std=new_row[2]
            new_div=new_row[3]
            new_vote=new_row[4]
            
            query="SELECT * FROM poll"
            self.cur.execute(query)
            exists=0
            for original_row in self.cur.fetchall():
                # checking if same candidate
                original_name=original_row[1]
                original_std=original_row[2]
                original_div=original_row[3]
                original_vote=original_row[4]
                
                if original_name==new_name and original_std==new_std and original_div==new_div:
                    
                    if original_vote ==new_vote:
                        #all same no updation
                        exists=1
                        break
                    else:
                        #updates vote
                        query='UPDATE poll SET VOTE=? WHERE CANDIDATE=? AND STD=? AND DIV=?'
                        self.cur.execute(query,(new_vote,new_name,new_std,new_div))
                        exists=1
            if exists==0: # to be inserted
                query='INSERT INTO poll(CANDIDATE,STD,DIV,VOTE) VALUES(?,?,?,?)'
                self.cur.execute(query,(new_name,new_std,new_div,new_vote))
                self.con.commit()
            
    def OnExit(self, event):  # wxGlade: MyMenuBar.<event_handler>
        self.Close()
        event.Skip()

    def OnAbout(self, event):  # wxGlade: MyMenuBar.<event_handler>
        abt=About(self,-1,"")
        event.Skip()
        
    def __set_properties(self):
        # begin wxGlade: poll.__set_properties
        self.SetTitle("EVM Electronic Voting Machine")
        self.SetSize((646, 678))
        self.SetFocus()
        self.label_1.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_1.SetSelection(0)
        self.label_2.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_2.SetSelection(0)
        self.list_box_1.SetMinSize((300, 320))
        self.list_box_1.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.list_box_1.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        #self.list_box_1.SetSelection(0) Comented as error in new ubuntu
        self.button_1.SetMinSize((140, 40))
        self.button_1.Enable(False)
        self.text_ctrl_1.SetMinSize((300, 33))
        self.text_ctrl_1.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_2.SetMinSize((140, 40))
        self.button_2.Enable(False)
        self.button_3.SetMinSize((150, 150))
        self.button_3.SetBackgroundColour(wx.Colour(66, 111, 66))
        self.button_3.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_3.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_4.SetMinSize((150, 150))
        self.button_4.SetBackgroundColour(wx.Colour(47, 47, 79))
        self.button_4.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_4.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_5.SetMinSize((150, 150))
        self.button_5.SetBackgroundColour(wx.Colour(204, 50, 50))
        self.button_5.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_5.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.panel_1.SetMinSize((622, 744))
        self.panel_1.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: poll.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_9_staticbox.Lower()
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.VERTICAL)
        sizer_4_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(self.label_1, 0, 0, 0)
        sizer_5.Add(self.combo_box_1, 0, 0, 0)
        sizer_4_copy.Add(sizer_5, 0, 0, 0)
        sizer_6.Add(self.label_2, 0, 0, 0)
        sizer_6.Add(self.combo_box_2, 0, 0, 0)
        sizer_4_copy.Add(sizer_6, 0, wx.EXPAND, 20)
        sizer_4.Add(sizer_4_copy, 0, wx.SHAPED, 0)
        sizer_3.Add(sizer_4, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, wx.BOTTOM, 20)
        sizer_7.Add(self.list_box_1, 0, 0, 0)
        sizer_8.Add(self.button_1, 0, wx.TOP, 20)
        sizer_9.Add(self.text_ctrl_1, 0, 0, 0)
        sizer_9.Add(self.button_2, 0, wx.TOP, 10)
        sizer_8.Add(sizer_9, 1, wx.TOP | wx.EXPAND, 50)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_10.Add(self.button_3, 0, wx.LEFT, 30)
        sizer_10.Add(self.button_4, 0, wx.LEFT, 30)
        sizer_10.Add(self.button_5, 0, wx.LEFT, 30)
        sizer_2.Add(sizer_10, 1, wx.TOP | wx.EXPAND, 40)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.ALL | wx.EXPAND, 12)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade
    def OnKeyPress(self,event):
        pass
    def OnLoad(self):
        
        self.list_box_1.Clear()
        if self.combo_box_1.Value!='Select' and  self.combo_box_2.Value!='Select' :
            query='SELECT CANDIDATE FROM poll WHERE STD=? AND DIV=?'
            self.cur.execute(query,(self.CLASS,self.DIV))
            result=self.cur.fetchall()
            list=[]
            for item in result:
                list.append(item[0])
                self.list_box_1.Append(item[0])
                        
            
    def OnClass(self, event):  # wxGlade: poll.<event_handler>
        self.CLASS= self.combo_box_1.Value
        if self.text_ctrl_1.Value!='' and self.combo_box_1.Value!='Select' and  self.combo_box_2.Value!='Select' :
            self.button_2.Enabled=True
        else:
             self.button_2.Enabled=False
            
        self.OnLoad()
        event.Skip()

    def OnDiv(self, event):  # wxGlade: poll.<event_handler>
        self.DIV= self.combo_box_2.Value
        if self.text_ctrl_1.Value!='' and self.combo_box_1.Value!='Select' and  self.combo_box_2.Value!='Select' :
            self.button_2.Enabled=True
        else:
             self.button_2.Enabled=False
            
        self.OnLoad()
        event.Skip()

    def OnList(self, event):  # wxGlade: poll.<event_handler>
        
        if self.list_box_1.GetSelection()!=-1:
            self.button_1.Enabled=True
        else:
            self.button_1.Enabled=False
        event.Skip()

    def OnRemove(self, event):  # wxGlade: poll.<event_handler>
        
        sel=self.list_box_1.GetSelection()
        item=self.list_box_1.GetString(sel)
        
        # checkig if votes already polled for deleting in that case the votes prepolled
        query="SELECT COUNT(ID) FROM poll WHERE STD=? AND DIV=? AND VOTE>0"
        self.cur.execute(query,(self.CLASS,self.DIV))
        result=self.cur.fetchone()
        
        if result and result[0]!=0:
            msg='Removing a Candidate will delete all polled votes for the current class.'
            msg+=' Do you want to continue?'
            dlg = wx.MessageDialog(self, msg, '',wx.YES_NO| wx.ICON_WARNING)
            if dlg.ShowModal() == wx.ID_NO:
                dlg.Destroy()
                return 0
            dlg.Destroy()
        
        
        query='DELETE FROM poll WHERE CANDIDATE=? AND STD=? AND DIV=?'
        self.cur.execute(query,(item,self.CLASS,self.DIV))
        query='UPDATE poll SET VOTE=0 WHERE STD=? AND DIV=?'# Setting all votes to zero when a new candidate is added
        self.cur.execute(query,(self.CLASS,self.DIV))
        self.con.commit()
        self.list_box_1.Delete(sel)
        
        event.Skip()

    def OnText(self, event):  # wxGlade: poll.<event_handler>
        if self.text_ctrl_1.Value!='' and self.combo_box_1.Value!='Select' and  self.combo_box_2.Value!='Select' :
            self.button_2.Enabled=True
        else:
             self.button_2.Enabled=False
        
       
        event.Skip()
       

    def OnAdd(self, event):  # wxGlade: poll.<event_handler>
        if len(self.text_ctrl_1.Value)>40:
            dlg = wx.MessageDialog(self, 'Cannot Add !Maximum characters allowed for name is 40', '',wx.OK | wx.ICON_ERROR)
            self.text_ctrl_1.Value=''
            self.text_ctrl_1.SetFocus()
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        query='SELECT COUNT(ID) FROM poll WHERE STD=? AND DIV=?'
        self.cur.execute(query,(self.CLASS,self.DIV))
        result=self.cur.fetchone()
        if result:
            
            if result[0]==10:
                dlg = wx.MessageDialog(self, 'Maximum number of candidates is 10. Try removing some', '',wx.OK | wx.ICON_ERROR)
                self.text_ctrl_1.SetFocus()
                dlg.ShowModal()
                dlg.Destroy()
                return 0
            
        
        # checkig if votes already polled for deleting in that case the votes prepolled
        query="SELECT COUNT(ID) FROM poll WHERE STD=? AND DIV=? AND VOTE>0"
        self.cur.execute(query,(self.CLASS,self.DIV))
        result=self.cur.fetchone()
        if result and result[0]!=0:
            msg='Adding a Candidate will delete all polled votes for the current class.'
            msg+='Do you want to continue?'
            dlg = wx.MessageDialog(self, msg, '',wx.YES_NO| wx.ICON_WARNING)
            if dlg.ShowModal() == wx.ID_NO:
                dlg.Destroy()
                return 0
            dlg.Destroy()
        
        query='INSERT INTO poll(CANDIDATE,STD,DIV) VALUES(?,?,?)'
        self.cur.execute(query,(self.text_ctrl_1.Value.upper(),self.CLASS,self.DIV))
        query='UPDATE poll SET VOTE=0 WHERE STD=? AND DIV=?'# Setting all votes to zero when a new candidate is added
        self.cur.execute(query,(self.CLASS,self.DIV))
        self.con.commit()
        self.text_ctrl_1.Value=''
        self.text_ctrl_1.SetFocus()
        self.OnLoad()
        event.Skip()

    def OnStart(self, event):  # wxGlade: poll.<event_handler>
        
        if self.combo_box_1.Value=='Select' or self.combo_box_2.Value=='Select':
            
            dlg = wx.MessageDialog(self, 'Select a class and division', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        elif self.list_box_1.Count<=0:
            dlg = wx.MessageDialog(self, 'Add atleast one candidate', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        else:
            msg='New poll will be started. All polled votes, if any, will be deleted.'
            msg+=' Do you want to continue?'
            dlg = wx.MessageDialog(self, msg, '',wx.YES_NO| wx.ICON_WARNING)
            if dlg.ShowModal() == wx.ID_YES:
           
               
                
                query='UPDATE poll set VOTE=? WHERE STD=? AND DIV=?'
                self.cur.execute(query,(0,self.CLASS,self.DIV))
                self.con.commit()
                dlg = wx.MessageDialog(self, 'Starting Poll. You can return to this window pressing Ctrl+E', '',wx.OK | wx.ICON_INFORMATION)
                dlg.ShowModal()
                dlg.Destroy()
                self.PlaySound("start")
                
                machine=voting_machine(self,-1,"")
                machine.Load(self.CLASS,self.DIV)
                
                self.Hide()
            else:
                pass
       
        event.Skip()

    def OnRepoll(self, event):  # wxGlade: poll.<event_handler>
        if self.combo_box_1.Value=='Select' or self.combo_box_2.Value=='Select':
            
            dlg = wx.MessageDialog(self, 'Select a class and division', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        elif self.list_box_1.Count<=0:
            dlg = wx.MessageDialog(self, 'Add atleat one candidate', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        else:
            query='SELECT VOTE FROM poll WHERE STD=? AND DIV=?'
            self.cur.execute(query,(self.CLASS,self.DIV))
            tot_vot=0
            res=self.cur.fetchall()
            for item in res:
                try:
                    tot_vot+=int(item[0])
                except:
                    pass
            
            msg='Poll will continue from where stopped. Total vote polled='+str(tot_vot)
            msg+=' Do you want to continue?'
            dlg = wx.MessageDialog(self, msg, '',wx.YES_NO| wx.ICON_WARNING)
            if dlg.ShowModal() == wx.ID_YES:
           
                dlg = wx.MessageDialog(self, 'Starting RePoll. You can return to this window pressing Ctrl+E', '',wx.OK | wx.ICON_INFORMATION)
                dlg.ShowModal()
                dlg.Destroy()
                self.PlaySound("resume")
                
                machine=voting_machine(self,-1,"")
                machine.Load(self.CLASS,self.DIV)
                
                self.Hide()
                
        event.Skip()

    def OnResult(self, event):  # wxGlade: poll.<event_handler>
        
        
        # Checking if result is avilable for any class
        query="SELECT DISTINCT STD,DIV FROM poll WHERE VOTE>0"
        self.cur.execute(query)
        result=self.cur.fetchall()
        
        if  not result:
        
        
            dlg = wx.MessageDialog(self, 'No result to desplay as no poll is conducted', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        elif self.combo_box_1.Value=='Select' or self.combo_box_2.Value=='Select':
            
            
            
            
            msg="Select class and division for individual class result. Do you want to generate a consolidated report for the whole school election?"
            dlg = wx.MessageDialog(self, msg, '',wx.YES_NO| wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.OnConsolidatedResult()
               
            dlg.Destroy()
            return 0
            
        elif self.list_box_1.Count<=0:
            dlg = wx.MessageDialog(self, 'Add atleast one candidate and conduct poll for the class', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        else:
            result=PDF()
            result.Print(self.CLASS,self.DIV)
            path="/tmp/"+self.CLASS+"_"+self.DIV+".pdf"
            result.output(path,'F')
            
           
            subprocess.call(["xdg-open",path])
        event.Skip()
        
    def OnConsolidatedResult(self):
        
        result=PDF()
        result.PrintConsolidated()
        path="/tmp/consolidated.pdf"
        result.output(path,'F')
            
           
        subprocess.call(["xdg-open",path])
        
        # end of class poll
        
    def PlaySound(self,sound):
        
        if sound=="start":audio="starting.mp3"
        elif sound=="resume":audio="resuming.mp3"
        elif sound=="end":audio="ending.mp3"
        else:return
        
        pygame.init()
        
        pygame.mixer.music.load(dir+"/"+audio)
        
        pygame.mixer.music.play()

        time.sleep(1)
        
'''
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = poll(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
'''

